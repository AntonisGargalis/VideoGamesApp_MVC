// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoGames.DataAccess.Data;

#nullable disable

namespace VideoGames.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240514160511_addForeignKeyForCategoryProductRelation")]
    partial class addForeignKeyForCategoryProductRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VideoGames.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Strategy"
                        });
                });

            modelBuilder.Entity("VideoGames.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Survival in a post apocaliptic world",
                            Price = 39.899999999999999,
                            Publisher = "Bethesda Studios",
                            SerialNumber = "345-F54-O11",
                            Title = "Fallout 4"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Action first person shooting",
                            Price = 59.899999999999999,
                            Publisher = "ACTIVITION",
                            SerialNumber = "367-C14-D45",
                            Title = "Call of Duty Modern Warfare"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Medival world with nights and wizards",
                            Price = 29.899999999999999,
                            Publisher = "CD Project",
                            SerialNumber = "876-T23-W19",
                            Title = "The Witcher 3"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "RPG MMO viking game",
                            Price = 24.899999999999999,
                            Publisher = "Bethesda Studios",
                            SerialNumber = "E45-S94-S41",
                            Title = "Elder Scrolls Skyrim"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Greek hellenic 300bc",
                            Price = 49.899999999999999,
                            Publisher = "Ubisoft",
                            SerialNumber = "A85-C14-O77",
                            Title = "Assassin Creed Odyssey"
                        });
                });

            modelBuilder.Entity("VideoGames.Models.Product", b =>
                {
                    b.HasOne("VideoGames.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
